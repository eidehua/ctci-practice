Big O chapter in CTCI.

Big O (upper bound), Big Theta (lower bound), and Big Omega (tight bound). Industry uses tight bound to mean big Omega
Best, worst, and expected cases describe the big O time for particular inputs or scenarios.
Big O describes a bound for runtime

Space Complexity
Stack space in recursive calls counts! This is because recursive calls add a level to the stack, so the calls exist simulatenously on the call stack, and at the base case you have O(x) (where x is the space complexity) space used on the stack

O(N) may not be always better than O(N^2) depending on the specific inputs and constants, but we really only care about the rate of increase (measuring the effect when inputs are large)

If algorithm is of form "do this, then when you are all done, do that" add the runtimes
If algorithm is of form "do this for each time you do that, then multiply the runtimes"

Amortized time: worst case happens every once in a while, but won't happen again for a long time after so cost is "amortized"
X insertions take O(2X) time. Amortized time for each insertion is O(1)

Log N Runtimes: cutting problem in half every time!
  Example: binary search: finding element x in an sorted array of size N. Compare x with the midpoint. if x == midpoint, we found x!
  otherwise, if x < middle, then we search the first half of array for x. If x > middle, we search the right half for x.
  When we are at 2 elements, midpoint is (1-0)/2 = 0.5 --> rounds to 0 (so first element of the two is the "middle" element)
  Total runtime = how many steps until N becomes 1?
    In binary search, it is how many divisions by 2 until N becomes one
    OR think of it as: how many multiplications by 2 starting at 1 until we get to N
    eg 2^k = N -> k = log_2(N)
    k multiplications
    log_2(N) multiplications
    
  What if we divided size by 3 every time? By 4? etc?? 
  
Recursive runtimes: THIS IS HARD!! 
  Tree method 
    Root = original function call f(N). f(N) should call some functions itself, those will be the children of f(N) and the next level
  Usually when a recursive function makes multiple calls, the runtime will be O(branches^{depth}) !!
  EG O(2^n)
  Base matters for exponential run times! 2^n vs 8^n -> 2^n vs (2^3)^n -> 2^n vs 2^2n * 2^n

Hard examples:

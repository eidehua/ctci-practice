Big O chapter in CTCI.

Big O (upper bound), Big Theta (lower bound), and Big Omega (tight bound). Industry uses tight bound to mean big Omega
Best, worst, and expected cases describe the big O time for particular inputs or scenarios.
Big O describes a bound for runtime

Space Complexity
Stack space in recursive calls counts! This is because recursive calls add a level to the stack, so the calls exist simulatenously on the call stack, and at the base case you have O(x) (where x is the space complexity) space used on the stack

O(N) may not be always better than O(N^2) depending on the specific inputs and constants, but we really only care about the rate of increase (measuring the effect when inputs are large)

If algorithm is of form "do this, then when you are all done, do that" add the runtimes
If algorithm is of form "do this for each time you do that, then multiply the runtimes"

Amortized time: worst case happens every once in a while, but won't happen again for a long time after so cost is "amortized"
X insertions take O(2X) time. Amortized time for each insertion is O(1)

Log N Runtimes: cutting problem in half every time!
  Example: binary search: finding element x in an sorted array of size N. Compare x with the midpoint. if x == midpoint, we found x!
  otherwise, if x < middle, then we search the first half of array for x. If x > middle, we search the right half for x.
  When we are at 2 elements, midpoint is (1-0)/2 = 0.5 --> rounds to 0 (so first element of the two is the "middle" element)
  Total runtime = how many steps until N becomes 1?
    In binary search, it is how many divisions by 2 until N becomes one
    OR think of it as: how many multiplications by 2 starting at 1 until we get to N
    eg 2^k = N -> k = log_2(N)
    k multiplications
    log_2(N) multiplications
    
  What if we divided size by 3 every time? By 4? etc?? 
  
Recursive runtimes: THIS IS HARD!! 
  Tree method 
    Root = original function call f(N). f(N) should call some functions itself, those will be the children of f(N) and the next level
  Usually when a recursive function makes multiple calls, the runtime will be O(branches^{depth}) !!
  EG O(2^n)
  Base matters for exponential run times! 2^n vs 8^n -> 2^n vs (2^3)^n -> 2^n vs 2^2n * 2^n

Hard examples:
Example 8: 
  Algorithm that took in an array of strings, sorted each string, and then sorted the array. Be careful here, there are several different "n" we need to deal with.
  Let s be length of longest string
  Let a be length of array
  Sorting one string: O(s log s)
  Sorting all strings: O(a * s log s)
  Sorting on N elements is usually a O(N log N) operation, but be careful! We are sorting strings, not the usually integers!
  All sorting algorithms compares the elements of the array to continue. Integer comparison takes O(1) time, but string comparision takes O(s) time
  To sort all the strings, then it would take O(a*s log a) time, since a sorting algorithm on an array of length a has O(a log a) comparisons

  So total run time is O(a * s log s) + O(a * s log a) = O(a*s(log a + log s))

  What to remember: SORTING ALGORITHMS on an array of length a does O(a log a) COMPARISONS, the total runtime of the sort depends on how long each comparison takes!

Example 12:
  void permutation(String str) {
    permutation(str, "");
  }

  void permutation(String str, String prefix) {
    if (str.length() == 0 ) {
      System.out.println(prefix);
    } else {
      for (int i = 0; i < str.length(); i++) {
        String rem = str.substring(0, i) + str.substring(i+1);
        permutation(rem, prefix + str.charAt(i));
      }
    }
  }

  ** How many times does permutation get called in its base case? If we have a string of length N, how many permutations do we have? N!
  We have N! calls to permutation in base case, where prefix is the full permutation (prefix stores permutations)
  EG: 7 characters in a string. In first "slot" we can place any of the 7 characters. Then we have 6 choices for the second slot (for each of the 7 choices). 
  Total number of options is 7*6*5*4*3*2*1 = 7!
  This means we have n! leaves. Each leaf is attached to a path of length n (since prefix length increases by 1 every time) 
    No more than n*n! nodes (function calls) in the tree
  Each function call takes O(n) time-- 
    O(n) to print prefix
    O(n) for string concatenation (creating string rem)
    *note we do not consider the for loop here -- that could be different way to evaluate the runtime. 
    *the reason we don't consider the for loop explicitly is because it is considered in the number of nodes in the tree (helps to generate the permutations, it is considered part of the runtime of the permutations)

  Total work is O(n^2 * n!)
    

  temp -> "t" emp -> "te" mp    ANOTHER BRANCH: temp -> "e" tmp -> "et" mp memoization won't help???
  might need another algorithm to find best runtime O(n*n!)
  https://www.quora.com/What-is-the-fastest-algorithm-to-find-all-possible-permutations-of-a-string

  

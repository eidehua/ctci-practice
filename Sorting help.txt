Algorithm summary

Pivot = last element for simplicity 

Start with a variable that points to the first element of array (portion) to be sorted
This variable will be marked as ^ below
And this variable is the "first element NOT guaranteed to be smaller than the pivot"

If ^ points to a element larger than the pivot: Swap the pivot with the element to the left of it (call it L).
Then swap the ^ element with the L element. 
	Result: Now the ^ element is guaranteed to be larger than the pivot. We do NOT have a guarantee for the L element yet

If ^ points to an element smaller than the pivot: Move the pivot one to the right
If the ^ points to the pivot:
	Call quicksort on the smaller half and the larger half

After -> means guaranteed larger than pivot
Before <- means guaranteed smaller than pivot

Quick sort Phase 1
5 7 3 8 1 9 7 6 4
^
6 7 3 8 1 9 7 4-> 5
^
7 7 3 8 1 9 4-> 6 5
^
9 7 3 8 1 4-> 7 6 5
^
1 7 3 8 4-> 9 7 6 5
^
1<- 7 3 8 4-> 9 7 6 5
    ^
1<- 8 3 4-> 7 9 7 6 5
    ^
1<- 3 4-> 8 7 9 7 6 5
    ^
1 3 <-4-> 8 7 9 7 6 5
      ^
	  
Each step uses two swaps, but we can have an "advanced swapper" that knows all 3 to swap and swaps em together